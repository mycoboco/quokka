{
  "name": "wcwidth.js",
  "version": "0.0.2",
  "description": "A JavaScript porting of C's wcwidth() and wcswidth()",
  "author": {
    "name": "Woong Jun",
    "email": "woong.jun@gmail.com",
    "url": "http://code.woong.org/"
  },
  "contributors": [],
  "homepage": "http://code.woong.org/wcwidth.js",
  "repository": {
    "type": "hg",
    "url": "http://code.woong.org/hg/wcwidth.js"
  },
  "bugs": {
    "url": "http://code.woong.org/wcwidth.js/trac",
    "email": "woong.jun@gmail.com"
  },
  "main": "wcwidth.js",
  "dependencies": {
    "underscore": ">= 1.3.0"
  },
  "devDependencies": {},
  "engines": {
    "node": ">= 0.8.0"
  },
  "licenses": "MIT",
  "keywords": [
    "wide character",
    "wc",
    "wide character string",
    "wcs",
    "terminal",
    "width",
    "wcwidth",
    "wcswidth"
  ],
  "readme": "  wcwidth.js: A JavaScript Porting of Markus Kuhn's wcwidth() Implementation\n  ==========================================================================\n\n  wcwidth.js is a simple JavaScript porting of wcwidth() implemented in C by\n  Markus Kuhn (the original implementation can be found on\n  http://www.cl.cam.ac.uk/~mgk25/ucs/wcwidth.c). wcwidth() and its string\n  version, wcswidth() are defined by IEEE Std 1002.1-2001, a.k.a. POSIX.1-2001,\n  and return the number of columns used to represent the given wide character\n  and string. Markus's implementation assumes the wide character given to those\n  functions to be encoded in ISO 10646, which is almost true for JavaScript's\n  characters.\n\n  For convenience, wcwidth.js sets the getter of the property named 'wcwidth'\n  for the String type. You don't need to invoke a function to get the width of\n  strings, but inspecting the wcwidth property is enough. The following code\n  snippet shows how to use wcwidth.js:\n\n    var wcwidth = require('wcwidth')({\n        nul:     0,\n        control: -1\n    });    // equivalent to var wcwidth = require('wcwidth')();\n\n    console.log(\"한글\".wcwidth);    // prints 4\n    console.log(\"\\0\".wcwidth);      // prints 0\n    console.log(\"\\t\".wcwidth);      // prints -1\n\n  The argument '{ nul: 0, control: -1 }' (which are the default values, in fact)\n  tells wcwidth.js to return 0 for the NUL character and -1 for non-printable\n  control characters. Setting a negative value to 'nul' or 'control' makes the\n  wcwidth property set to -1 for any string that contains NUL or control\n  characters respectively. If you plan to replace each control character with,\n  say, '???' when printing, you can 'require' wcwidth.js as follows:\n\n    var wcwidth = require('wcwidth')({\n        control: 3\n    });    // leaving nul as 0\n\n    console.log(\"\\t\".wcwidth);    // prints 3\n    console.log(\"\\0\".wcwidth);    // prints 0\n\n  wcwidth.js also provides a methods. Since JavaScript has no character type, it\n  is meaningless to have two versions while POSIX does for C. The method also\n  accepts a code value that can be obtained by the charCodeAt() method.\n\n    console.log(wcwidth('한'));                 // prints 2\n    console.log(wcwidth('글'.charCodeAt(0));    // prints 2\n    console.log(wcwidth('한글'));               // prints 4\n\n  For the copyright issues, see the accompanying LICENSE file.\n\n  If you have a question or suggestion, do not hesitate to contact me via email\n  <woong.jun@gmail.com> or web <http://code.woong.org/>.\n",
  "_id": "wcwidth.js@0.0.2",
  "dist": {
    "shasum": "300f06a5630926cdc7960b447f5aa3f8c5cd9f28"
  },
  "_from": "/home/mycoboco/data/com/code/wcwidth.js"
}
